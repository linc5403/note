#+LATEX_HEADER: \usepackage{ctex}

#+begin_src plantuml :file ./img/docker-overview.svg
  @startmindmap
  ,* docker
  ,** docker 操作
  ,*** search
  ,****_ docker search 命令进行查找
  ,****_ docker + 镜像名字搜索对应的docker hub
  ,*** pull
  ,****_ docker pull 拉对应的镜像到本地
  ,****_ 注意版本号
  ,*** run
  ,**** 不退出
  ,*****_ docker run -dit <image>
  ,*** 删除
  ,**** 删除容器
  ,*****_ docker rm [docker id | docker name]
  ,**** 删除镜像
  ,*****_ docker rmi [docker image name: tag]
  ,** docker 管理
  ,*** docker system
  ,*** docker prune
  ,*** start
  ,*** restart
  ,*** stop
  ,** docker 制作
  ,*** docker file
  ,****_ FROM:基础镜像
  ,****_ RUN: 运行命令
  ,****_ COPY: 拷贝文件
  ,****_ CMD: 启动脚本
  ,*** docker build
  ,****_ docker build -f ~/docker/p3_web/Dockerfile -t linchuan/p3-web /data/code
  ,****_ docker build [选项] <上下文路径/URL/->
  ,** docker 编排
  ,*** docker-compose
  
  @endmindmap
#+end_src

#+RESULTS:
[[file:./img/docker-overview.svg]]

* docker
** linux下的安装

*** Step 1 apt-get install docker-ce

    The Docker installation package available in the official Debian repository may not be the latest version. To ensure we get the latest version, we'll install Docker from the official Docker repository. To do that, we'll add a new package source, add the GPG key from Docker to ensure the downloads are valid, and then install the package.

    First, update your existing list of packages:
    #+begin_src shell
      sudo apt update   
    #+end_src

    Next, install a few prerequisite packages which let apt use packages over HTTPS:  
    #+begin_src sh
      sudo apt install apt-transport-https ca-certificates curl gnupg2 software-properties-common
    #+end_src


    Then add the GPG key for the official Docker repository to your system:  
    #+begin_src sh
      curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
    #+end_src

    Add the Docker repository to APT sources:  
    #+begin_src sh
      sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
    #+end_src

    Next, update the package database with the Docker packages from the newly added repo:    
    #+begin_src sh
      sudo apt update
    #+end_src

    Make sure you are about to install from the Docker repo instead of the default Debian repo:   
    #+begin_src sh
      apt-cache policy docker-ce
    #+end_src

    You'll see output like this, although the version number for Docker may be different:  
    #+begin_example
      Output of apt-cache policy docker-ce
      docker-ce:
	Installed: (none)
	Candidate: 18.06.1~ce~3-0~debian
	Version table:
	   18.06.1~ce~3-0~debian 500
	      500 https://download.docker.com/linux/debian stretch/stable amd64 Packages
    #+end_example

    Notice that ~docker-ce~ is not installed, but the candidate for installation is from the Docker repository for Debian 9 (stretch).

    Finally, install Docker:
    
    #+begin_src sh
      sudo apt install docker-ce
    #+end_src

    Docker should now be installed, the daemon started, and the process enabled to start on boot. Check that it's running:  
    #+begin_src sh
      sudo systemctl status docker
    #+end_src

    The output should be similar to the following, showing that the service is active and running:  
    #+begin_example
      Output
      ● docker.service - Docker Application Container Engine
	 Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)
	 Active: active (running) since Thu 2018-07-05 15:08:39 UTC; 2min 55s ago
	   Docs: https://docs.docker.com
	Main PID: 21319 (dockerd)
	 CGroup: /system.slice/docker.service
		 ├─21319 /usr/bin/dockerd -H fd://
		 └─21326 docker-containerd --config /var/run/docker/containerd/containerd.toml
    #+end_example

    Installing Docker now gives you not just the Docker service (daemon) but also the docker command line utility, or the Docker client. We'll explore how to use the docker command later in this tutorial.

*** Step 2 — Executing the Docker Command Without Sudo (Optional)  

    *只有docker group的用户和root用户才能执行docker命令*

    By default, the docker command can only be run the root user or by a user in the docker group, which is automatically created during Docker's installation process. If you attempt to run the docker command without prefixing it with sudo or without being in the docker group, you'll get an output like this:
    #+begin_example
      Output
      docker: Cannot connect to the Docker daemon. Is the docker daemon running on this host?
      See 'docker run --help'.
    #+end_example

    If you want to avoid typing sudo whenever you run the docker command, add your username to the docker group:
    #+begin_src sh
      sudo usermod -aG docker ${USER}
    #+end_src

    To apply the new group membership, log out of the server and back in, or type the following:
    #+begin_src sh
      su - ${USER}
    #+end_src

    You will be prompted to enter your user's password to continue.  

    Confirm that your user is now added to the docker group by typing:  
    #+begin_src sh
      id -nG
    #+end_src

    Output  
    #+begin_example
      sammy sudo docker
    #+end_example

    If you need to add a user to the docker group that you're not logged in as, declare that username explicitly using:
    #+begin_src sh
      sudo usermod -aG docker username
    #+end_src

    The rest of this article assumes you are running the docker command as a user in the docker group. If you choose not to, please prepend the commands with sudo.

    Let's explore the docker command next.   

**** 在tmux中将当前用户加入docker group  

     1. 将用户hunch加入docker group中
	#+begin_src sh
	  sudo usermod -aG docker hunch
        #+end_src
     2. 刷新当前session
	#+begin_src sh
	  newgrp docker
        #+end_src
	
     Horribly hacky, but you could use two layers of newgrp to achieve this for a particular group:
     #+begin_src sh
       id -g
     #+end_src

     ...will give you the current primary group ID. We'll call this orig_group for the purposes of this example. Then:
     #+begin_src sh
       newgrp <new group name>  
     #+end_src
     
     ...will switch you to that group as the primary and add it to the list of groups returned by groups or id -G. Now, a further:
     #+begin_src sh
       newgrp <orig_group>
     #+end_src
     
     ...will get you a shell in which you can see the new group and the primary is the original one.

     This is horrible and will only get you one group added at a time, but it has helped me out a couple of times to get groups added without logging out/in my whole X session (e.g. to get fuse added as a group to a user so that sshfs will work).

     Edit : This doesn't require you to type your password either, which su will.

*** Step 3 修改docker数据存储路径  
    1. ~/etc/docker/daemon.json~
       #+begin_src json
	 {
	   "data-root": "/data/docker"
	 }
       #+end_src

    2. 已有数据同步到 ~/data/docker~
       #+begin_src sh
	 sudo rsync -axPS /var/lib/docker/ /data/docker
       #+end_src

    3. 重启docker
       #+begin_src sh
	 sudo systemctl stop docker
	 sudo systemctl start docker
	 sudo systemctl restart docker
       #+end_src

** DONE 国内仓库
   CLOSED: [2020-03-11 Wed 10:13]
   ~/etc/docker/daemon.json~
   #+begin_src json
     {"registry-mirrors":["https://8hajhgqd.mirror.aliyuncs.com/"]}
   #+end_src

** 重启服务
   #+begin_example
     sudo systemctl daemon-reload
     sudo systemctl restart docker
   #+end_example

** 常用命令
   #+begin_src sh
     docker info | grep 'Docker Root Dir'
     docker rmi
     docker rm
     docker search
     docker run
     docker pull
     docker commit -m "added Node.js" -a "sammy" d9b100f2f636 sammy/ubuntu-nodejs
     docker run -dit --name os centos
     docker exec -it CONTAINER_ID sh
     docker build -f /path/to/dockerfile -t nginx:v3 .
     docker build -f ~/docker/p3_web/Dockerfile -t linchuan/p3-web /data/code
     docker build [选项] <上下文路径/URL/->
   #+end_src

** 删除

   #+begin_example
     docker image prune
     docker container prune
     docker system prune -a
     docker system df
   #+end_example

** copy file

   #+begin_src sh
     docker cp /opt/test/file.txt mycontainer：/opt/testnew/
     docker cp mycontainer：/opt/testnew/file.txt /opt/test/
   #+end_src

   [[file:docker.org][返回]]

* docker-compose

  #+begin_example
    docker-compose up #启动所有容器 
    docker-compose up -d #后台启动并运行所有容器 
    docker-compose up --no-recreate -d #不重新创建已经停止的容器 
    docker-compose up -d test2 #只启动test2这个容器 
    docker-compose stop #停止容器 
    docker-compose start #启动容器 
    docker-compose down #停止并销毁容器
  #+end_example

** docker-compose 文件
   
   #+begin_src yaml
     version: '3.7'
     services:
       proxy:
	 # build:
	 #   context: .
	 #   dockerfile: Dockerfile_proxy
	 container_name: dev-proxy
	 restart: always
	 image: registry.cn-hangzhou.aliyuncs.com/hunch/dev-env:0.1-proxy
	 stdin_open: true
	 tty: true
       rabbitmq:
	 container_name: dev-rabbitmq
	 hostname: my-rabbitmq
	 restart: always
	 image: rabbitmq:3.7
	 stdin_open: true
	 tty: true
       redis:
	 container_name: dev-redis
	 restart: always
	 image: redis:5.0
	 stdin_open: true
	 tty: true
       web:
	 # build:
	 #   dockerfile: ${AISHIPIN_PATH}/deploy/dev_env/Dockerfile_worker
	 #   context: ${AISHIPIN_PATH}
	 container_name: dev-web
	 volumes:
	   - type: bind
	     source: ${AISHIPIN_PATH}
	     target: /var/www/aishipin
	 restart: always
	 ports:
	   - '8070:8080/tcp'
	   - '8071:8081/tcp'
	 environment:
	   - CLUSTER=dev
	   - DJANGO_SETTINGS_MODULE=aivideo.settings_dev
	 image: registry.cn-hangzhou.aliyuncs.com/hunch/dev-env:0.3-web
	 depends_on:
	   - proxy
	 working_dir: /var/www/aishipin/aivideo
	 command: ["/var/www/aishipin/deploy/dev_env/start_dev_web.sh"]
	 stdin_open: true
	 tty: true
       worker:
	 # build:
	 #   dockerfile: ${AISHIPIN_PATH}/deploy/dev_env/Dockerfile_worker
	 #   context: ${AISHIPIN_PATH}
	 container_name: dev-worker
	 volumes:
	   - type: bind
	     source: ${AISHIPIN_PATH}
	     target: /var/www/aishipin
	 restart: always
	 environment:
	   - CLUSTER=dev
	   - DJANGO_SETTINGS_MODULE=aivideo.settings_dev
	 image: registry.cn-hangzhou.aliyuncs.com/hunch/dev-env:0.3-worker
	 depends_on:
	   - proxy
	 working_dir: /var/www/aishipin/aivideo
	 command: ['python', 'manage.py', 'celery_autoreload']
	 stdin_open: true
	 tty: true
	 # render:
	 #   # build:
	 #   #   dockerfile: ${RENDER_PATH}/deploy/dev-env/Dockerfile_render
	 #   #   context: ${RENDER_PATH}
	 #   container_name: dev-render
	 #   volumes:
	 #     - type: bind
	 #       source: ${RENDER_PATH}
	 #       target: /opt/render_engine
	 #   restart: always
	 #   hostname: dev-render
	 #   environment:
	 #     - CLUSTER=dev
	 #     # - DJANGO_SETTINGS_MODULE=aivideo.settings_dev
	 #   image: registry.cn-hangzhou.aliyuncs.com/hunch/dev-env:0.3-render
	 #   depends_on:
	 #     - proxy
	 #   working_dir: /opt/render_engine
	 #   command: ['python3.6', '/opt/render_engine/run_single_task.py', 'dev-render']
   #+end_src

   #+begin_src yaml
     version: "3.7"
     services:
       test1: 
	 image: "10.8.52.225:5000/base:v1.2.1_autoserver" 
	 ports: 
	   - "1022:22" 
	   - "1080:80" 
	 volumes: 
	   - /work/test1:/work 
	 dns: 
	   - 10.1.2.9 
	   - 10.1.2.70 
	 hostname: test1 
       test2: 
	 image: "10.8.52.225:5000/base:v1.2.1_autoserver" 
	 ports: 
	   - "1023:22" 
	 volumes: 
	   - /work/test2:/work 
	 dns: 10.1.2.9 
	 hostname: test2 
	 links: 
	   - els1:db
   #+end_src

   - ports (HOST宿主机:CONTAINER容器)
     #+begin_example
       ports:
	 - "3000"
	 - "3000-3005"
	 - "8000:8000"
	 - "9090-9091:8080-8081"
	 - "49100:22"
	 - "127.0.0.1:8001:8001"
	 - "127.0.0.1:5000-5010:5000-5010"
	 - "6060:6060/udp"
	 - "12400-12500:1240"
     #+end_example

** compose 不退出
   Docker镜像的缺省命令是 ~bash~，如果不加 ~-it~, ~bash~ 命令执行了自动会退出，加 ~it~ 后 ~docker~ 命令会为容器分配一个伪终端，并接管其 ~stdin/stdout~ 支持交互操作，这时候 ~bash~ 命令不会自动退出
   
   像不使用 ~docker-compose~,我们会执行类似如下的命令
   #+begin_src sh
     docker run -it --name node node
   #+end_src
   
   但 ~docker-compose~ 需要额外配置下

   需要在 ~docker-compose.yml~ 中包含以下行:
   #+begin_example
     stdin_open: true  
     tty: true  
   #+end_example

   第一个对应于 ~docker run~ 中的 ~-i~ ,第二个对应于 ~-t~ 。

** docker-compose安装
   1. install
      #+begin_src sh
	sudo curl -L "https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
	sudo chmod +x /usr/local/bin/docker-compose
      #+end_src

      上面的版本号参考:https://github.com/docker/compose/releases
   2. zsh自动补全
      #+begin_src sh
	mkdir -p ~/.zsh/completion
	curl -L https://raw.githubusercontent.com/docker/compose/1.25.2/contrib/completion/zsh/_docker-compose > ~/.zsh/completion/_docker-compose
      #+end_src
      
      ~.zshrc~ 文件中增加下面两行:
      #+begin_example
	fpath=(~/.zsh/completion $fpath)
	autoload -Uz compinit && compinit -i
      #+end_example
* TODO docker 镜像的制作
** docker file
   #+begin_example
     FROM ubuntu:16.04
     COPY proxy /proxy
     COPY proxy/ssh /root/.ssh

     RUN apt-get update -qq &&\
	 apt-get install -qq --no-install-recommends polipo shadowsocks ssh &&\
	 echo "==> Clean up..."  &&\
	     rm -rf /var/lib/apt/lists/*     &&\
	 chmod +x /proxy/start_proxy.sh  && \
	 chmod 0600 ~/.ssh/id_rsa*

     CMD ["/proxy/start_proxy.sh"]
   #+end_example
   - FROM

     指定基础镜像

   - COPY
     
     将上下文的文件和文件夹拷贝到image里面

   - RUN
     
     执行相关命令
     
     ~cd~ 需要放到这里面来执行

   - CMD
     
     最好执行一个 ~shell~ 脚本
** docker build
   #+begin_example
   docker build -t tag .
   #+end_example

* debug
** ip tools install
   - ping
     #+begin_example
       apt install iputils-ping
     #+end_example
   - ifconfig
     #+begin_example
       apt install net-tools
     #+end_example
   - tcptraceroute
     #+begin_example
       apt install tcptraceroute
     #+end_example
** 容器访问宿主机
   - linux
     
     ~172.17.0.1~

   - macos

     ~docker.for.mac.host.internal~

** 一直重启怎么办

   - ~docker logs -f <container>~

